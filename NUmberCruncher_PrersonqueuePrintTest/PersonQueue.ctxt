#BlueJ class context
comment0.target=PersonQueue
comment0.text=\r\n\ Die\ Klasse\ PersonQueue\ ermoeglicht\ die\ Erzeugung\ einer\r\n\ Warteschlange.\r\n\ Personen\ koennen\ zur\ Queue\ hinzugefuegt\ und\ wieder\ entfernt,\ \r\n\ einzelne\ Person-Objekte\ ausgegeben\ und\ die\ Person,\ mit\r\n\ dem\ lexikalisch\ kleinsten\ Namen\ ermittelt\ werden.\r\n\ Zudem\ kann\ geprueft\ werden,\ ob\ das\ Array\ voll\ oder\ leer\ und\r\n\ die\ Arraygroe\u00DFe\ wiedergegeben\ werden.\r\n\ \r\n\ @author\ \ (Grace\ D.\ Ntiwa\ Kanou)\r\n\ @author\ \ (Sandra\ R.\ Hussong)\r\n\ \r\n\ @version\ (01.05.23)\r\n
comment1.params=size
comment1.target=PersonQueue(int)
comment1.text=\r\n\ Der\ Konstruktor\ versetzt\ das\ Objekt\ PersonQueue\ \ \r\n\ nach\ seiner\ Erzeugung\ in\ einen\ gueltigen\ Zustand.\r\n\ Die\ Kapazitaet\ des\ personArrays\ ist\ bei\ diesem\r\n\ Konstruktor\ frei\ waehlbar.\r\n\ \r\n\ @param\ size\ Die\ Groesse\ des\ Arrays.\r\n\ \r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ die\ \r\n\ \ \ \ \ \ \ \ \ Groesse\ des\ personArrays\ kleiner\ 0\ ist.\r\n
comment10.params=
comment10.target=java.lang.String\ smallest()
comment10.text=\r\n\ smallest\ Ermittelt\ den\ Namen\ der\ Person,\ mit\ dem\ lexikalisch\r\n\ \ \ \ \ \ \ \ \ \ kleinsten\ Namen.\r\n\r\n\ @return\ Der\ Name\ der\ Person,\ mit\ dem\ lexikalisch\r\n\ \ \ \ \ \ \ \ \ kleinsten\ Namen.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ toString\ Ermoeglicht\ es\ eine\ String-Repraesentation\ des\ Objekts\r\n\ \ \ \ \ \ \ \ \ \ PersonQueue\ zu\ liefern.\r\n
comment2.params=
comment2.target=PersonQueue()
comment2.text=\r\n\ Der\ Konstruktor\ versetzt\ das\ Objekt\ PersonQueue\ \ \r\n\ nach\ seiner\ Erzeugung\ in\ einen\ gueltigen\ Zustand.\r\n\ Die\ Kapazitaet\ des\ personArrays\ ist\ bei\ diesem\r\n\ Konstruktor\ bereits\ festgelegt.\r\n
comment3.params=o
comment3.target=void\ addLast(java.lang.Object)
comment3.text=\r\n\ addLast\ Ermoeglicht\ es\ ein\ Objekt\ hinten\ an\ die\ \r\n\ \ \ \ \ \ \ \ \ Queue\ anzufuegen.\r\n\ \r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ die\ \r\n\ \ \ \ \ \ \ \ \ Queue\ bereits\ voll\ ist.\r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ die\ \r\n\ \ \ \ \ \ \ \ \ das\ Objekt,\ das\ hinzugefuegt\ werden\ soll\r\n\ \ \ \ \ \ \ \ \ kein\ Person-Objekt\ ist.\r\n
comment4.params=
comment4.target=Person\ removeFirst()
comment4.text=\r\n\ removeFirst\ Entfernt\ das\ erste\ Element\ und\ gibt\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ eine\ Referenz\ darauf\ zurueck.\ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ die\ \r\n\ \ \ \ \ \ \ \ \ Queue\ leer\ ist.\ \ \ \ \ \ \ \ \r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ der\ \r\n\ \ \ \ \ \ \ \ \ Wert\ des\ Elements\ an\ der\ \ ist.\ \r\n
comment5.params=i
comment5.target=Person\ get(int)
comment5.text=\r\n\ get\ Das\ i-te\ Element\ wird\ zurueckgegeben.\r\n\ \r\n\ @param\ i\ Der\ Index\ eines\ Elements\ im\ Array\ \r\n\ \ \ \ \ \ \ \ \ \ an\ der\ Stelle\ i.\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ die\ \r\n\ \ \ \ \ \ \ \ \ Queue\ leer\ ist.\ \ \ \ \ \ \ \ \r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ der\ \r\n\ \ \ \ \ \ \ \ \ Wert\ des\ Indexes\ kleiner\ Null\ oder\ \r\n\ \ \ \ \ \ \ \ \ groesser\ als\ die\ Laenge\ des\ Arrays\ ist.\ \r\n
comment6.params=
comment6.target=boolean\ empty()
comment6.text=\r\n\ empty\ Testet,\ ob\ die\ Queue\ leer\ ist.\r\n
comment7.params=
comment7.target=boolean\ full()
comment7.text=\r\n\ full\ Testet,\ ob\ die\ Queue\ voll\ ist.\r\n
comment8.params=
comment8.target=int\ size()
comment8.text=\r\n\ size\ Ermittelt\ die\ Anzahl\ eingefuegter\ Elemente.\r\n\ \r\n\ @throws\ Eine\ Exception\ wird\ geworfen,\ wenn\ die\ \r\n\ \ \ \ \ \ \ \ \ Queue\ leer\ ist.\ \ \ \ \ \ \ \ \r\n
comment9.params=
comment9.target=void\ print()
comment9.text=\r\n\ print\ Iteriert\ durch\ die\ Queue\ und\ gibt\ diese\r\n\ \ \ \ \ \ \ auf\ der\ Konsole\ aus.\r\n\r\n
numComments=12
